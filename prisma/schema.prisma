datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt()
  uploadModels  Model[]
  Log           Log[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Model {
  id            String        @id @default(uuid())
  name          String
  uploader      User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt()
  userId        String
  thumbnail     String?       @default("")
  modelFile     String        @default("scene.gltf")
  modelUsdz     String?
  category      ModelCategory @default(MISC)
  tags          Json?
  description   String?       @db.Text()
  modelVertex   BigInt?       @default(0)
  modelTriangle BigInt?       @default(0)
  modelSize     BigInt?       @default(0)
  usdzSize      BigInt?       @default(0)
  zipSize       BigInt?       @default(0)
  viewed        Int           @default(0)
  Comment       Comment[]
  blinded       Boolean       @default(false)
}

model Comment {
  id             Int      @id @default(autoincrement())
  commenter      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt()
  text           String
  modelCommented Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  userId         String
  modelId        String
}

enum Role {
  UNAUTHENTICATED
  USER
  ADMIN
  DEVELOPER
}

enum ModelCategory {
  MISC
  FURNITURE
  ARCHITECTURE
  ANIMALS
  FOOD
  CHARACTERS
  NATURE
  VEHICLES
  SCENES
  ACCESSORIES
  HEALTH
  INSTRUMENTS
  PLANTS
  WEAPONS
  TECHNOLOGY
}

model Log {
  id        BigInt   @id @default(autoincrement())
  userId    String
  action    Action
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

enum Action {
  MODEL_DOWNLOAD
  MODEL_UPLOAD
}
